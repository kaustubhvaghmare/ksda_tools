# Program accepts a rotation curve file generated by the GetCurve.py routine
# And the fits a high order spline function to the same.

from astropy.table import Table
import matplotlib.pyplot as plt
from MatplotlibCustom import *
import numpy as np
import sys
import scipy.interpolate as si
import pickle

# Check if file name was supplied.
try:
	filename = sys.argv[1]
except:
	print "Improper syntax. No file name specified."
	sys.exit(2)
# Attempt loading the file.
try:
	rotcurve = Table.read(filename, format="ascii")
except:
	print "No such curve exists or curve corrupt."
	sys.exit(3)

# Display the rotation curve for user to preview.
fig1 = plt.figure(1)
plt.errorbar( rotcurve["Row"], rotcurve["lambda"], rotcurve["lambda_err"], fmt="o" )
plt.xlabel("Row Number", fontsize=18)
plt.ylabel("Wavelength Center", fontsize=18)
plt.title("A spline fit will be performed to the following curve", fontsize=14)
fig1.show()
dum = raw_input("Press any key to continue fitting.")

# Some parameters for the spline function.
spline_order = 1
spline_smooth = 1

# Get sorted element indices for x-axis variable. It is the requirement of the
# function being used for Spline Fitting that the X be in an increasing order.
# But the way the rotation curve was extracted was to stepping away from the centre
# to the outside and then back to centre and the other side. Hence the need for
# sorting the same.

sortind = np.argsort( rotcurve["Row"] )
# The following does the spline fit.
spline = si.UnivariateSpline( rotcurve["Row"][sortind], rotcurve["lambda"][sortind], 1/rotcurve["lambda_err"][sortind], s=spline_smooth)
spline_z = si.UnivariateSpline( rotcurve["Row"][sortind], rotcurve["z"][sortind], 1/rotcurve["z_err"][sortind], s=spline_smooth)

# Below, we are just generating a sample curve for the user to visualize the fit.
xs = np.linspace( np.min(rotcurve["Row"]), np.max(rotcurve["Row"]), 1000)
ys = spline(xs)

# Now, present the plot to the user.
fig1 = plt.figure(1)
plt.errorbar( rotcurve["Row"], rotcurve["lambda"], rotcurve["lambda_err"], fmt="o" )
plt.plot(xs, ys)
plt.xlabel("Row Number", fontsize=18)
plt.ylabel("Wavelength Center", fontsize=18)
plt.title("Best Fit Spline is Shown.", fontsize=14)
fig1.show()

# Formally confirm that the user is satisfied with the spectrum
choice = raw_input("Are you okay with the fit? 'y' to approve, any other key to disapprove.").rstrip()
if choice == "y":
	outfile = open( filename+"_fit.out", "w")
	outfilez = open( filename+"_fit_z.out", "w")
	pickle.dump(spline, outfile)
	pickle.dump(spline_z, outfilez)
	print "Best-fit spline saved as %s." % (filename+"_fit.out")
	print "Note that this file can only be retrieved by the derotation program."
	print "Using outside of Derotation program is discouraged."
else:
	print "You may want to either run by changing the spline parameters. Or maybe redo the rotation curve extraction. Goodbye!"
